{"posts":[{"title":"Computer Network Lab 1: Switchyard &amp; Mininet","text":"实验名称Lab 1: Switchyard &amp; Mininet 实验目的了解计算机网络实验环境和基本操作 实验内容Step 1: Modify the Mininet topology在拓扑中删除。 我们在类的构造函数中创建一个拓扑。若想要删除server2，则需修改类的构造函数，具体到本次操作，即不进行server 2和hub的连接，同时不再设置server2的mac和ip。 代码修改部分如下： 123456789#在结点列表中删除server2#不再将server2连接到hubfor node in nodes.keys(): if node != &quot;server2&quot;: self.addHost(node, **nodeconfig)for node in nodes.keys(): # all links are 10Mb/s, 100 millisecond prop delay if node != &quot;hub&quot; and node != &quot;server2&quot;: self.addLink(node, &quot;hub&quot;, bw=10, delay=&quot;100ms&quot;) 1234567#取消设置server2的mac和ipdef setup_addressing(net): for node, config in nodes.items(): if node != &quot;server2&quot;: reset_macs(net, node, config[&quot;mac&quot;]) if node != &quot;hub&quot; and &quot;server2&quot;: set_ip(net, node, &quot;hub&quot;, config[&quot;ip&quot;]) Step 2: Modify the logic of a device任务是计算有多少数据包通过集线器进出。 设置两个变量cnt_in和cnt_out记录通过集线器进出的数据包的数量，并在循环过程中进行统计和输出信息。 代码修改部分如下： 1234567891011121314151617181920212223242526272829303132333435def main(net: switchyard.llnetbase.LLNetBase): my_interfaces = net.interfaces() mymacs = [intf.ethaddr for intf in my_interfaces] #初始化计数变量cnt_in和cnt_out cnt_in = 0 cnt_out = 0 while True: try: _, fromIface, packet = net.recv_packet() except NoPackets: continue except Shutdown: break log_debug (f&quot;In {net.name} received packet {packet} on {fromIface}&quot;) #每收到一个数据包，更新cnt_in cnt_in = cnt_in + 1 eth = packet.get_header(Ethernet) if eth is None: log_info(&quot;Received a non-Ethernet packet?!&quot;) return if eth.dst in mymacs: log_info(&quot;Received a packet intended for me&quot;) else: for intf in my_interfaces: if fromIface!= intf.name: log_info (f&quot;Flooding packet {packet} to {intf.name}&quot;) net.send_packet(intf, packet) #每发送一个数据包，更新cnt_out cnt_out = cnt_out + 1 log_info(&quot;in:{} out:{}&quot;.format(cnt_in, cnt_out)) net.shutdown() Step 3: Modify the test scenario of a device使用new_packet函数创建一个新的测试用例并进行测试。 在myhub_testscenario.py中新增如下代码作为新的测试用例： 1234567891011121314151617181920#test case 4: a frame with broadcast destination should get sent out# all ports except ingresstestpkt = new_packet( &quot;20:00:00:00:00:01&quot;, &quot;ff:ff:ff:ff:ff:ff&quot;, &quot;192.168.1.100&quot;, &quot;255.255.255.255&quot; )s.expect( PacketInputEvent(&quot;eth1&quot;, testpkt, display=Ethernet), (&quot;An Ethernet frame with a broadcast destination address &quot; &quot;should arrive on eth1&quot;) )s.expect( PacketOutputEvent(&quot;eth0&quot;, testpkt, &quot;eth2&quot;, testpkt, display=Ethernet), (&quot;The Ethernet frame with a broadcast destination address should be &quot; &quot;forwarded out ports eth0 and eth2&quot;) ) 测试结果如图： Step 4: Run your device in Mininet在Mininet中运行Switchyard​程序。 以下为运行记录截图： Step 5: Capture using Wireshark在拓扑中创造一些流量并使用Wireshark​​捕获数据包。 执行server1 ping -c 1 hub进行测试 以下为测试记录： 可以看到，server1向client发送了一个请求并得到了回复。","link":"/2024/03/17/Computer-Network-Lab-1-Switchyard-Mininet/"}],"tags":[{"name":"Computer Network","slug":"Computer-Network","link":"/tags/Computer-Network/"}],"categories":[],"pages":[]}